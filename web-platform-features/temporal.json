{
  "$comment": "Example goal: show a feature proposal not yet supported",
  "identifier": "temporal",
  "shortName": "Temporal",
  "longName": "Temporal (proposed ECMAScript API)",
  "description": "A proposed date and time API for JavaScript",
  "editorialMetadata": {
    "expires": "2023-09-27",
    "$comment": "Since this is a proposal, we could have a guideline (and automation) to retire, archive, or freeze the data associated with this feature on the expiration date, if it's still unsupported."
  },
  "constituentFeatures": [
    {
      "source": "bcd",
      "query": "javascript.builtins.Temporal",
      "ignoreMissing": false,
      "$comment": "This feature doesn't exist! But it could be evidence of being unsuported."
    },
    {
      "source": "bcd",
      "query": "javascript.builtins.Temporal.Now",
      "ignoreMissing": false
    },
    {
      "source": "bcd",
      "query": "javascript.builtins.Temporal.Now.instant",
      "ignoreMissing": false,
      "$comment": "oh no there's a bunch! I'll be here all day."
    },
    {
      "source": "bcd",
      "query": "javascript.builtins.Temporal.Instant",
      "ignoreMissing": false,
      "$comment": "We might be tempted to do something like `includeDescendants: true` to avoid writing out all of the descendant features. I'm suspicious of this, however, since it may lead to us to breaking the versioning contract (you don't want Feature 2020 to pick up new features for all timeâ€”it should be fixed). Instead, we might want to consider using tooling (e.g., a dependabot-style upgrade mechanism) to make such rollups automatic, for the comprehensive features where that's desirable."
    }
  ]
}
